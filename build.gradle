// Top-level build file where you can add configuration options common to all sub-projects/modules.
/**
 * 构建工具就是对你的项目进行编译、运行、签名、打包、依赖管理等一系列功能的合集，传统的构建工具有 Make、Ant、Maven、Ivy等，而 Gradle是新一代的自动化构建工具
 */
// 顶层的建文件：用于定义用于项目中所有模块的构建配置

// buildscript代码块用于定义项目中所有模块共用的Gradle代码库和依赖项
// buildscript: 用于定义Gradle自己在构建过程中所需的依赖
buildscript {

    // 配置项目的全局属性(额外属性)：这些属性可以在项目中所有模块中引用(引用语法：rootProject.ext.property_name)
    ext {
        kotlinVersion = '1.3.20'
        minSdkVersion = 21
        targetSdkVersion = 28
    }


    // 定义Gradle用来搜索和下载依赖的仓库
    repositories {
        google()
        jcenter()
    }

    // 依赖代码块：用于表示Gradle用来构建项目时需要的依赖项
    dependencies {
        // Gradle插件版本，是Google定义的，即 Android gradle plugin 的版本
        classpath 'com.android.tools.build:gradle:4.2.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20"
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

// 配置所有模块需要的依赖和仓库，默认只有JCenter and Google's Maven仓库
// 建议是每个模块的依赖都要在自己模块内的构建脚本中添加
allprojects {
    repositories {
        // 各个代码库的列出顺序决定了 Gradle 在这些代码库中搜索各个项目依赖项的顺序
        google()
        jcenter()
    }
}



task clean(type: Delete) {
    delete rootProject.buildDir
}
